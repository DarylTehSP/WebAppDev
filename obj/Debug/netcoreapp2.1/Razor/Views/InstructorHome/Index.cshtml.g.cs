#pragma checksum "D:\SP stuff\Web Development\kachoweded - Copy\Learner\TMS\Views\InstructorHome\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b58467946747470966bbde04a83d6de8d666231a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_InstructorHome_Index), @"mvc.1.0.view", @"/Views/InstructorHome/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/InstructorHome/Index.cshtml", typeof(AspNetCore.Views_InstructorHome_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\SP stuff\Web Development\kachoweded - Copy\Learner\TMS\Views\_ViewImports.cshtml"
using TMS;

#line default
#line hidden
#line 2 "D:\SP stuff\Web Development\kachoweded - Copy\Learner\TMS\Views\_ViewImports.cshtml"
using TMS.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b58467946747470966bbde04a83d6de8d666231a", @"/Views/InstructorHome/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4b920ee378507dd0789e3303ed664c79361ef06d", @"/Views/_ViewImports.cshtml")]
    public class Views_InstructorHome_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 465, true);
            WriteLiteral(@"<!DOCTYPE html>
<html>
<style>
    .button {
        border: none;
        color: white;
        padding: 15px 32px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
    }

    .button1 {
        background-color: #4CAF50;
    }
    /* Green */
    .button2 {
        background-color: #008CBA;
    }
    /* Blue */
</style>
");
            EndContext();
            BeginContext(465, 7580, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "be93012fc55e4b70834b183da3dab832", async() => {
                BeginContext(471, 659, true);
                WriteLiteral(@"

    <h2>Timesheet</h2>

    Choose Month and Year: <input formControlName=""datePicker"" type=""month"" id=""monthChosen"" name=""monthChosen"" value=""2020-05"">
    <p id=""daysInMonth""></p>
    <button class=""button button2"">Submit</button>
    <table id=""timesheet"" border=""1"" align=""center"">
        <thead id=""TSHead"">

        </thead>
        <tbody id=""TSBody"">
        </tbody>
    </table>
    <style>
        .hourInput {
            width: 100%
        }
    </style>

    <script>
        var noOfProjects = 0;
        var existingCellList = [];

        DrawTable(daysInMonth(new Date().getYear()+1900,new Date().getMonth()+1))
");
                EndContext();
                BeginContext(1223, 4014, true);
                WriteLiteral(@"
        $('#monthChosen').on('change',function(e){
            monthChosenVal = $('#monthChosen').val()
            console.dir($('#monthChosen').val())
            hypenIndex = monthChosenVal.indexOf(""-"")
            days = daysInMonth(monthChosenVal.substring(hypenIndex+1),monthChosenVal.substring(0,hypenIndex))
            console.log(days)
            DrawTable(days)
            PopulateTable(monthChosenVal.substring(hypenIndex+1),monthChosenVal.substring(0,hypenIndex))
        })

        function DrawTable(noOfDays){

            $.ajax({
                    url: `/API/Instructor/gcats`,
                    method: 'GET'
            }).done(function (data) {
                console.dir(data);
                noOfProjects = data.length
                document.getElementById(""TSHead"").innerHTML = """";
                let tableHeaders = ""<tr><td>Date</td>""
                for(k=0;k<data.length;k++){
                    let cusName = data[k].customerName
                    tableHead");
                WriteLiteral(@"ers += ""<td>"" + cusName + ""</td>""
                }
                tableHeaders += ""</tr>""
                document.getElementById(""TSHead"").innerHTML = tableHeaders;

                let $tblBody = $(""#TSBody"")
                var text = """";
                document.getElementById(""TSBody"").innerHTML = """";
                //print out rows=num of days
                for (let iRow = 1; iRow <= noOfDays; iRow++) {
                    let $currentRow = $(""<tr></tr>"")
                    let $idxCol = $(`<td>`+iRow+`</td>`)
                    $currentRow.append($idxCol)
                    //print out columns=num of project
                    for (iCol = 0; iCol < noOfProjects; iCol++) {
                        let name = iRow+""-""+data[iCol].customerId

                        $cusCol = $(`<td align=""center""></td>`)
                        $cusInput = $(`<input class=""hourInput"" type=""number"" min=""0"" max=""24"" id=""`+name+`"" name=""`+name+`"" data-cell=""`+name+`"" />`)
                        $c");
                WriteLiteral(@"usCol.append($cusInput)
                        $currentRow.append($cusCol)
                        $cusInput.on('blur',(e)=>{
                            $cell = $(e.target)
                            hoursWorked = $cell.val()
                            cellName = e.target.name
                            console.dir(cellName)
                            hypenIndexCell = cellName.indexOf(""-"")

                            cusId = cellName.substring(hypenIndexCell+1)

                            day = cellName.substring(0,hypenIndexCell).length == 2 ? cellName.substring(0,hypenIndexCell) : ""0""+cellName.substring(0,hypenIndexCell)
                            monthChosenVal = $('#monthChosen').val()
                            hypenIndex = monthChosenVal.indexOf(""-"")
                            month = monthChosenVal.substring(hypenIndex+1)
                            year = monthChosenVal.substring(0,hypenIndex)
                            console.log(""Cell with ""+day+""/""+month+""/""+year+"" for ");
                WriteLiteral(@"id ""+cusId+"" change to the value of ""+hoursWorked)
                            UpdateTable(day,month,year,cusId ,hoursWorked)
                        })

                    }
                    $tblBody.append($currentRow)
                }

            }).fail(function (data) {
                new Noty({ text: ""Fail to load table. "" + data.responseJSON.message, type: 'error', timeout: 3000 }).show();
            });
        }


        function daysInMonth(month, year) {
            return new Date(year,month,0).getDate()
        }

        function PopulateTable(month, year){
            let monthyear = month+""-""+year
            $.ajax({
                    url: `/API/Instructor/populategcats/`+monthyear,
                    method: 'GET'
            }).done(function (data) {
                console.dir(data);
                existingCellList = [];
                for (let i=0;i<data.length;i++){
");
                EndContext();
                BeginContext(5372, 162, true);
                WriteLiteral("                    cellId = data[i].cellId\r\n                    hourWorkedFromRecord = data[i].hoursWorked\r\n                    existingCellList.push(cellId)\r\n\r\n");
                EndContext();
                BeginContext(5628, 2410, true);
                WriteLiteral(@"                    $(""#""+cellId).val(hourWorkedFromRecord)
                }
                console.dir(existingCellList)
            }).fail(function (data) {
                new Noty({ text: ""Fail to load user hours worked details. "" + data.responseJSON.message, type: 'error', timeout: 3000 }).show();
            });
        }

        function UpdateTable(day,month,year,projectId,hours){
            let wfdata = new userFormData(day, month, year, projectId, hours)
            console.log(wfdata);
            maxDays = daysInMonth(month, year);

            var indexOfCellId = existingCellList.indexOf(parseInt(day,10)+""-""+projectId)
            if(indexOfCellId === -1){
                //Create new record
                $.ajax({
                    url: `/API/Instructor/CreateTimeLog`,
                    method: 'POST',
                    data: wfdata,
                    contentType: 'application/x-www-form-urlencoded',
                    dataType: 'application/json'
           ");
                WriteLiteral(@"     }).done(function (data) {
                    new Noty({ text: ""Saved"" + data.message, type: 'success', timeout: 500 }).show();
                }).fail(function (data) {
                    new Noty({ text: ""Fail to save user hours worked details. "" + data.responseJSON.message, type: 'error', timeout: 3000 }).show();
                });
             }
            else{
                //Update existing record
                $.ajax({
                    url: `/API/Instructor/UpdateTimeLog`,
                    method: 'PUT',
                    data: wfdata,
                    contentType: 'application/x-www-form-urlencoded',
                    dataType: 'application/json'
                }).done(function (data) {
                    new Noty({ text: ""Updated"" + data.message, type: 'success', timeout: 500 }).show();
                }).fail(function (data) {
                    new Noty({ text: ""Fail to update user hours worked details. "" + data.responseJSON.message, type: 'error', time");
                WriteLiteral(@"out: 3000 }).show();
                });
            }
            DrawTable(maxDays);
            PopulateTable(month, year);
        }

        function userFormData(day,month,year,projectId,hours){
            this.date = day+""-""+month+""-""+year;
            this.project = projectId
            this.hoursWorked = hours
        }

    </script>
");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(8045, 11, true);
            WriteLiteral("\r\n</html>\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
