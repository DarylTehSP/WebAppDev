#pragma checksum "D:\SP stuff\Web Development\kachoweded - Copy\Learner\TMS\Views\InstructorHome\PrepareMyTimesheet.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "670126161e2a1fd1a688a79ec372bde8158c28fd"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_InstructorHome_PrepareMyTimesheet), @"mvc.1.0.view", @"/Views/InstructorHome/PrepareMyTimesheet.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/InstructorHome/PrepareMyTimesheet.cshtml", typeof(AspNetCore.Views_InstructorHome_PrepareMyTimesheet))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\SP stuff\Web Development\kachoweded - Copy\Learner\TMS\Views\_ViewImports.cshtml"
using TMS;

#line default
#line hidden
#line 2 "D:\SP stuff\Web Development\kachoweded - Copy\Learner\TMS\Views\_ViewImports.cshtml"
using TMS.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"670126161e2a1fd1a688a79ec372bde8158c28fd", @"/Views/InstructorHome/PrepareMyTimesheet.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4b920ee378507dd0789e3303ed664c79361ef06d", @"/Views/_ViewImports.cshtml")]
    public class Views_InstructorHome_PrepareMyTimesheet : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/tui.calendar/tui-calendar.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/tui.calendar/tui-code-snippet.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/tui.calendar/tui-calendar.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 1977, true);
            WriteLiteral(@"<div class=""row mt-5"">
	<div class=""col-12"">
		<h3>
			Preparing timesheet for
			<span class=""mr-1 ml-1"">Year </span>
			<span id=""yearBox"" class=""mr-1""></span>
			<span for=""monthNameBox"" class=""mr-1"">Month </span>
			<span id=""monthNameBox""></span>
		</h3>
		<div>
			<ul>
				<li>Simulate how instructor logon to prepare a monthly timesheet.</li>
				<li>The instructor can see the customer account and the respective timetable. He/she can choose the timetable before creating the timesheet</li>
				<li>The system does not have any record information on each timetable <i>relationship</i> with the instructors</li>
				<li>The instructor will discuss with Passion Studio which timetable information he/she needs to choose (through email, whatsapp etc.)</li>
				<li>The system will calculate the schedules based on the selected timetable information.</li>
				<li>The system will create schedule records inside the database</li>
				<li>The affected tables are TimeSheet and TimeSheetSchedule</li>
			");
            WriteLiteral(@"</ul>
		</div>
	</div>
</div>
<div class=""row"">
	<div class=""col-12 mt-5"" id=""appContainer""></div>
</div>
<div class=""row mt-2"">
	<div class=""col-12""><div class=""d-flex justify-content-center""><h3>Timesheet schedule data</h3></div></div>
</div>
<div class=""row mt-2"">
	<div class=""col-12"">
		<div class=""d-flex justify-content-center"">
			<button type=""button"" id=""generateButton"" class=""p-2 btn btn-primary"">Generate time sheet data</button>
		</div>
	</div>
</div>
<div class=""row"">
	<div class=""col-4""></div><div class=""col-4 h3 text-center""><span id=""calendarMonthAndYearBox""></span></div><div class=""col-4""></div>
</div>
<div class=""row"">
	<div class=""col-12 mt-2"" id=""calendar"" style=""height: 600px;""></div>
</div>
<div class=""row mt-2"">
	<div class=""col-12""><div class=""d-flex justify-content-center""><input type=""button"" class=""btn btn-primary"" id=""saveTimesheetButton"" value=""Save timesheet"" /></div></div>
</div>


");
            EndContext();
            DefineSection("scripts", async() => {
                BeginContext(1994, 5, true);
                WriteLiteral("\r\n\r\n\t");
                EndContext();
                BeginContext(1999, 72, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "1aef90320aab4d58865f158d056c5e1e", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(2071, 3, true);
                WriteLiteral("\r\n\t");
                EndContext();
                BeginContext(2074, 62, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "2c3d65ba21ae4eb684c81c77a2bff1b6", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(2136, 3, true);
                WriteLiteral("\r\n\t");
                EndContext();
                BeginContext(2139, 62, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "72fb3cd98d2c4e1e9f622cf98df0bb0d", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(2201, 20509, true);
                WriteLiteral(@"

	<style>
		.highlight {
			border: 3px solid orange;
			margin: 1px;
		}

		#yearBox, #monthNameBox {
			background-color: #444;
			color: white;
		}

		.table-hover tbody tr:hover td, .table-hover tbody tr:hover th {
			background-color: #efd956;
			cursor: pointer;
		}

		.timetable-not-visible {
			background: #BBB;
			background-image: radial-gradient(black 2%, transparent 0), radial-gradient(black 5%, transparent 0);
			background-size: 5px 5px;
			background-position: 0 0, 15px 15px;
		}

		.customer-account-not-visible {
			background: #BBB;
			background-image: radial-gradient(black 2%, transparent 0), radial-gradient(black 5%, transparent 0);
			background-size: 5px 5px;
			background-position: 0 0, 15px 15px;
		}
	</style>
	<script>


		//Reference: https://www.oreilly.com/library/view/learning-javascript-design/9781449334840/ch13s15.html
		//Reference: https://codepen.io/danichk/pen/YyVeXa to obtain CSS polka dot code
		//Most important reference: https://gist");
                WriteLiteral(@".github.com/wch/7090027 (The code here follows the author's pattern)

		//There are two classes defined within the ""app"" namespace. CustomerAccount and AccountTimeTable class

		//app is an object used as a namespace
		//app is also declared as a ""single global variable"".
		let app = (function ($, moment, window) {

			//Variables in the namespace
			let app = {
				customerAccountList: [], /*Hold all the customer account which has account rate applicable for the current month*/
				customerAccountIdList: [],
				$appContainer: null,
				$appActualDateAndTimeContainer: null
			};

			// ""Public"" method initialize for the namespace
			app.initialize = function (inElementId) {
				this.$appContainer = $(inElementId);
				this.$appActualDateAndTimeContainer = $('<div></div>');
				this.$appContainer.append(this.$appActualDateAndTimeContainer);
				this.serviceTimeTableList = [];

			};
			//""Public"" method addCustomerAccount for namespace
			app.addCustomerAccount = function (inCustomerA");
                WriteLiteral(@"ccount) {
				//The main logic will not be checking whether the CustomerAccount object has been added.
				//Therefore, need to make use of the customerAccountList to keep track.
				if (this.customerAccountIdList.indexOf(inCustomerAccount.customerAccountId) < 0) {
					this.customerAccountList.push(inCustomerAccount);
					this.customerAccountIdList.push(inCustomerAccount.customerAccountId)
				}
			}//end of app.addCustomerAccount
			//""Public"" method generateActualSchedule for namespace
			app.generateActualSchedule = function (inMonth, inYear) {

				for (let index = 0; index < this.customerAccountList.length; index++) {
					let customerAccount = this.customerAccountList[index];
					customerAccount.generateActualSchedule(inMonth, inYear);
				}
			}//end of app.generateActualSchedule


			//""Public"" method renderTimeTable for namespace
			app.renderTimeTable = function () {
				for (let index = 0; index < this.customerAccountList.length; index++) {
					this.customerAccountList[inde");
                WriteLiteral(@"x].render(this.$appContainer);
				}
			}//end of app.renderTimeTable

			app.getServiceScheduleList = function () {
				this.serviceTimeTableList = [];
				for (let index = 0; index < this.customerAccountList.length; index++) {
					Array.prototype.push.apply(this.serviceTimeTableList, this.customerAccountList[index].getServiceScheduleList());
				}
				return this.serviceTimeTableList;
			}
			// ""Private"" methods in the namespace
			let checkForOverlapTimePeriod = (timeSegments) => {
				let ret = false;
				let i = 0;
				while (!ret && i < timeSegments.length - 1) {
					let seg1 = timeSegments[i];
					let seg2 = timeSegments[i + 1];
					let range1 = moment.range(moment(seg1[0], 'HH:mm'), moment(seg1[1], 'HH:mm'));
					let range2 = moment.range(moment(seg2[0], 'HH:mm'), moment(seg2[1], 'HH:mm'));
					if (range1.overlaps(range2)) {
						ret = true;
					}
					i++;

					return ret;
				}
			};//end of private method in namespace, checkForOverlapTimePeriod


			// A clas");
                WriteLiteral(@"s in the namespace
			app.CustomerAccount = (function () {
				// Contstructor
				let customerAccount = function (inApp, inCustomerAccountId, inCustomerAccountName, inIsVisible, inAccountRatePerHour, inInstructorWageRate) {
					this.customerAccountName = inCustomerAccountName;
					this.customerAccountId = inCustomerAccountId;
					this.visible = inIsVisible;
					this.accountRatePerHour = inAccountRatePerHour;
					this.instructorWageRate = inInstructorWageRate; //Percentage
					this.accountTimeTableList = [];
					this.$container = $(`<div class=""card""><div class=""card-body""><div class=""card-title""><h5>${this.customerAccountName}</h5></div></div></div>`)
					if (this.visible === false) {
						this.$container.addClass('customer-account-not-visible disabled');
					}
					this.$subContainer = $(`<table class=""table table-hover table-bordered""><thead><tr class=""row""><th colspan=""4"" class=""col-4""><div class=""d-flex justify-content-center"">Time table detail</div></th><th colspan=""4"" class=""col");
                WriteLiteral(@"-4""><div class=""d-flex justify-content-center"">Effective period, commission rate and acocunt rate</div></th></tr><tr class=""row""><th class=""col-1"">Week day name</th><th  class=""col-1"">Start time</th><th class=""col-1"">End time</th><th class=""col-1"">Duration</th><th class=""col-1"">Start date</th><th  class=""col-1"">End date</th><th class=""col-1"">Wage Rate (%)</th><th class=""col-1"">Account Rate per Hour</th></tr></thead><tbody></tbody></table>`);
					this.$container.append(this.$subContainer);
					this.app = inApp;
				};
				customerAccount.prototype.generateActualSchedule = function (inMonth, inYear) {

					for (let index = 0; index < this.accountTimeTableList.length; index++) {
						let accountTimeTable = this.accountTimeTableList[index];
						accountTimeTable.calculateActualSchedule(inMonth, inYear);
					}
				}//end of customerAccount.prototype.generateActualSchedule

				customerAccount.prototype.getServiceScheduleList = function () {
					let list = [];
					for (let index = 0; index < t");
                WriteLiteral(@"his.accountTimeTableList.length; index++) {
						let accountTimeTable = this.accountTimeTableList[index];
						if (accountTimeTable.selected === true) {
							Array.prototype.push.apply(list, accountTimeTable.getServiceScheduleList());
						}
					}
					return list;
				}//end of customerAccount.prototype.getServiceScheduleList

				customerAccount.prototype.render = function (inContainerElement) {
					for (index = 0; index < this.accountTimeTableList.length; index++) {
						this.accountTimeTableList[index].render();
					}
					inContainerElement.append(this.$container);
				};

				customerAccount.prototype.addAccountTimeTable = function (inAccountTimeTableId, inAccountRateId, inWeekDayNum, inStartTime, inEndTime, inTimeTableVisibility, inWageRate, inAccountRatePerHour, inTimeTableEffectiveStartDate, inTimeTableEffectiveEndDate) {
					let newAccountTimeTable = new app.AccountTimeTable(this.app, this, inAccountTimeTableId, inAccountRateId, inWeekDayNum, inStartTime, inEndTime, inTime");
                WriteLiteral(@"TableVisibility, inWageRate, inAccountRatePerHour, inTimeTableEffectiveStartDate, inTimeTableEffectiveEndDate, this.$subContainer);
					this.accountTimeTableList.push(newAccountTimeTable);
				};

				return customerAccount;
			})();

			// A class in the namespace
			app.AccountTimeTable = (function () {
				// Contstructor
				var accountTimeTable = function (inApp, inCustomerAccount, inAccountTimeTableId, inAccountRateId, inWeekDayNum, inStartTime, inEndTime, inIsVisible, inWageRate, inAccountRatePerHour, inTimeTableEffectiveStartDate, inTimeTableEffectiveEndDate, $inTimeTableContainerElement) {
					this.parent = inCustomerAccount,
						this.accountRateId - inAccountRateId;
					this.weekDayNum = inWeekDayNum;
					this.weekDayName = weekDayNumToName(inWeekDayNum);
					this.accountTimeTableId = inAccountTimeTableId;
					this.startTime = inStartTime;
					this.endTime = inEndTime;
					this.wageRate = inWageRate,
						this.accountRatePerHour = inAccountRatePerHour,
						this.effec");
                WriteLiteral(@"tiveStartDate = new Date(inTimeTableEffectiveStartDate);
					this.effectiveEndDate = new Date(inTimeTableEffectiveEndDate);
					this.visible = inIsVisible;
					this.selected = false;
					this.actualScheduleList = [];
					this.numOfHours = (this.endTime - this.startTime) / 60;
					this.$timeTableContainerElement = $inTimeTableContainerElement;
					this.$timeTableRowElement = $(`<tr class=""row""><td class=""col-1"">${this.weekDayName}</td><td  class=""col-1"">${convertToHHMM(this.startTime)}</td><td class=""col-1"">${convertToHHMM(this.endTime)}</td><td class=""col-1"">${this.numOfHours}</td><td class=""col-md-1"">${moment(this.effectiveStartDate).format('DD/MM/YYYY')}</td><td class=""col-md-1"">${moment(this.effectiveEndDate).format('DD/MM/YYYY')}</td><td class=""col-md-1"">${this.wageRate + '%'}</td><td class=""col-md-1"">$ ${this.accountRatePerHour}</td></tr>`)
					this.app = inApp;//Need to reference the main app object (parent) to access all the timetable accross customer account
				};
				function weekD");
                WriteLiteral(@"ayNumToName(inNumber) {
					let weekDayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
					return weekDayNames[inNumber - 1];
				};
				//Private method for AccountTimeTable
				function convertToHHMM(fractionalHours) {
					var totalMinutes = Math.round(fractionalHours) % (24 * 60),
						hours = Math.floor(totalMinutes / 60) % 12 || 12,
						minutes = totalMinutes % 60,
						suffix = totalMinutes >= 12 * 60 ? 'PM' : 'AM';

					if (minutes < 10) minutes = '0' + minutes;

					return hours + ':' + minutes + ' ' + suffix;
				}


				function convertToHHMM24hr(totalMinutesFromMidnight) {
					//-------------------------- Objective -------------------------------
					//Convert total minutes from midnight to HH:MM format (24 hour)
					//This function is necessary because needed by calling program to build a YYYY-MM-DDTHH:MM format
					//for the schedule input required by the calendar library.
					//-------------------------------------------");
                WriteLiteral(@"-----------------------------
					//console.log('function convertToHHMM24hr is called');
					//console.log('totalMinutesFromMidnight variable value ' + totalMinutesFromMidnight);
					var totalMinutes = Math.round(totalMinutesFromMidnight) % (24 * 60),
						hours = Math.floor(totalMinutes / 60),
						minutes = totalMinutes % 60;
					if (minutes < 10) minutes = '0' + minutes;
					let formattedHourNumber = ('0' + hours).slice(-2);
					//console.log('output of function convertToHHMM24hr: ' + formattedHourNumber + ':' + minutes);
					return formattedHourNumber + ':' + minutes;
				}

				accountTimeTable.prototype.deselect = function () { }
				//Public method
				accountTimeTable.prototype.render = function () {
					console.log('Inspect the visible property')
					console.log(this.visible);
					if (this.visible === true) {
						this.$timeTableRowElement.on('click', this, function (event) {
							console.log('time table element click event handler executed');
							let timeTable =");
                WriteLiteral(@" event.data;
							if (timeTable.selected === false) {
								timeTable.selected = true;
								//The internal logic will deselect the timetable which overlaps with
								//the current selected timetable.
								event.data.$timeTableRowElement.addClass('highlight');
							} else {
								timeTable.selected = false;
								timeTable.$timeTableRowElement.removeClass('highlight');
							}

						});
						this.$timeTableContainerElement.append(this.$timeTableRowElement);
					} else {

						this.$timeTableRowElement.addClass('timetable-not-visible disabled');

						this.$timeTableContainerElement.append(this.$timeTableRowElement);
					}
				};
				accountTimeTable.prototype.calculateActualSchedule = function (inMonth, inYear) {
					//https://stackoverflow.com/questions/33620161/get-all-monday-dates-in-month-using-moment-js
					//Managed to obtain this discussion to reference the calculation technique
					this.actualScheduleList = [];//empty the array first.
					let days =");
                WriteLiteral(@" moment(`${inYear}-${inMonth}-01`).weekdaysInMonth(this.weekDayNum - 1);
					console.log('---inspecting days array----');
					console.log(days);
					for (let index = 0; index < days.length; index++) {
						console.log(this.startTime);
						console.log(convertToHHMM24hr(this.startTime));
						if ((days[index] >= this.effectiveStartDate) && (days[index] <= this.effectiveEndDate)) {
							console.log('--- calculating actual schedule-- inspecting the days[index] inside the loop for calculateActualSchedule')
							console.log(days[index].format('YYYY-MM-DD') + 'T' + convertToHHMM24hr(this.startTime));
							let actualSchedule = {
								customerAccountName: this.parent.customerAccountName,
								date: days[index].format('DD/MM/YYYY'),
								day: days[index].format('dddd'),
								timeInInMinutes: this.startTime,
								timeOutInMinutes: this.endTime,
								accountRatePerHour: this.parent.accountRatePerHour,
								instructorWageRate: this.parent.instructorWageRate,
								timeI");
                WriteLiteral(@"n: convertToHHMM(this.startTime),
								timeOut: convertToHHMM(this.endTime),
								numberOfHours: this.numOfHours,
								//There was a bug found when demonstrating to Miss Leong on 26 Feb 2019 Tuesday 10AM. If the start time is 9AM, the formated
								//date-time data for the start property will become single digit for the hour portion. E.g. 2019-12-02T9:00. The calendar library will
								//regard that format as invalid. It needs to be 2019-12-02T09:00 (prefix a 0 infront if the hour number is a single digit)
								//https://stackoverflow.com/questions/8043026/how-to-format-numbers-by-prepending-0-to-single-digit-numbers/50757763
								start: days[index].format('YYYY-MM-DD') + 'T' + convertToHHMM24hr(this.startTime),
								end: days[index].format('YYYY-MM-DD') + 'T' + convertToHHMM24hr(this.endTime)
							};
							this.actualScheduleList.push(actualSchedule);
							console.dir(this.actualScheduleList);
						}//End if control statement (if the date is outside the effective sta");
                WriteLiteral(@"rt and end date period, don't create)
					}
				};
				accountTimeTable.prototype.getServiceScheduleList = function () {
					//https://stackoverflow.com/questions/33620161/get-all-monday-dates-in-month-using-moment-js
					//Managed to obtain this discussion to reference the calculation technique
					return this.actualScheduleList;
				}


				return accountTimeTable;
			})();

			return app;
		})(jQuery, moment, window);;

		(function (window, Calendar) {
			//Need to go through the developer's demo code to fully grasp the
			//concepts on using tui.calendar widget library.
			//https://nhnent.github.io/tui.calendar/latest/tutorials/js/default.js
			window.calendar = new Calendar('#calendar', {
				defaultView: 'month',
				scheduleView: true,
				useDetailPopup: true,
				disableClick: true, disableDblClick: true,
				header: 'Monthly timesheet',
				template: {
					monthGridHeader: function (model) {
						var date = new Date(model.date);
						var template = '<span class=""");
                WriteLiteral(@"tui-full-calendar-weekday-grid-date"">' + date.getDate() + '</span>';
						return template;
					}
				}
			});
			//Used console.dir to inspect the calender property, prototypes which are attached to
			//the window object.
			console.dir(window.calendar);

			$.ajax({
				method: 'GET',
				url: '/API/TimeSheets/GetCustomerAndAccountTimeTableDataByInstructorId'
			}).done(function (data) {
				let currentCustomerAccountId = 0;
				let customerAccount = null;
				let year = new Date(data.currentDateTime).getFullYear();
				let month = new Date(data.currentDateTime).getMonth();
				const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
					'July', 'August', 'September', 'October', 'November', 'December'
				];
				let monthName = monthNames[new Date(data.currentDateTime).getMonth()];
				$('#monthNameBox').text(monthName);
				$('#calendarMonthAndYearBox').text(monthName + ' ' + year);
				$('#yearBox').text(year);

				app.initialize('#appContainer')
				for (l");
                WriteLiteral(@"et index = 0; index < data.records.length; index++) {
					let record = data.records[index];
					if (currentCustomerAccountId !== record.customerAccountId) {
						if (customerAccount !== null) {
							console.log('Added customer account');

						}
						customerAccount = new app.CustomerAccount(app, record.customerAccountId, record.accountName, record.accountVisibility, record.accountRatePerHour, record.wageRate);
						currentCustomerAccountId = record.customerAccountId;
						app.addCustomerAccount(customerAccount);
					}
					console.log('Inserting timetable into customer account');
					customerAccount.addAccountTimeTable(record.accountTimeTableId, record.accountRateId, record.dayOfWeekNumber, record.startTimeInMinutes, record.endTimeInMinutes, record.timeTableVisibility, record.wageRate, record.accountRatePerHour, record.timeTableEffectiveStartDate, record.timeTableEffectiveEndDate);

				}
				app.renderTimeTable();
				window.calendar.clear({ immediately: true });
				window.calen");
                WriteLiteral(@"dar.setDate(new Date(year, month, 1));

				console.dir(app);
			});//end of ajax API call on GetCustomerAndAccountTimeTableDataByInstructorId

		})(window, tui.Calendar);


		$('#generateButton').on('click', function () {
			let monthName = $('#monthNameBox').text();
			const monthNames = [""January"", ""February"", ""March"", ""April"", ""May"", ""June"",
				""July"", ""August"", ""September"", ""October"", ""November"", ""December""
			];
			console.log(monthName);
			let year = $('#yearBox').text();
			let monthIndex = monthNames.indexOf(monthName);
			console.log(monthIndex);
			console.log(year);
			app.generateActualSchedule(parseInt(monthIndex + 1), parseInt(year));
			let serviceTimeTableList = app.getServiceScheduleList();
			console.dir('----check the schedule data-----')
			console.dir(serviceTimeTableList);
			let scheduleList = [];
			for (index = 0; index < serviceTimeTableList.length; index++) {
				let data = serviceTimeTableList[index];
				Array.prototype.push.apply(scheduleList, [
					");
                WriteLiteral(@"{
						id: index + 1,
						calendarId: '0',
						title: data.timeIn + '~' + data.timeOut + ' ' + data.customerAccountName + `\n Wage per hour: $ ${data.accountRatePerHour * (data.instructorWageRate / 100)}\n Account rate per hour: $ ${data.accountRatePerHour}`,
						category: 'time',
						start: data.start,
						end: data.end,
						isReadOnly: true,
						isAllDay: false,
					}])
			}//for loop
			window.calendar.clear({ immediately: true });
			window.calendar.setDate(new Date(year, monthIndex, 1));
			window.calendar.createSchedules(scheduleList);
			window.calendar.changeView('month', true);
		});
		$('#saveTimesheetButton').on('click', function () {
			let serviceTimeTableList = app.getServiceScheduleList();
			let scheduleList = [];
			for (index = 0; index < serviceTimeTableList.length; index++) {
				let data = serviceTimeTableList[index];
				scheduleList.push(
					{
						id: index + 1,
						officialStartTimeInHHMM: data.timeIn,
						officialEndTimeInHHMM: data.tim");
                WriteLiteral(@"eOut,
						customerAccountName: data.customerAccountName,
						officialStartTimeInMinutes: data.timeInInMinutes,
						officialEndTimeInMinutes: data.timeOutInMinutes,
						ratePerHour: data.accountRatePerHour,
						wageRatePerHour: data.instructorWageRate,

						dateOfLesson: data.date
					});
			}//for loop
			console.log(scheduleList);
			//scheduleList = JSON.stringify({ 'scheduleList': scheduleList } );
			$.ajax({
				method: 'POST',
				dataType: 'json',
				url: '/API/TimeSheets/CreateNewTimeSheet',
				contentType: ""application/json; charset=utf-8"",
				data: JSON.stringify(scheduleList)
			}).done(function (data) {

				new Noty({
					text: data.message,
					theme: 'metroui',
					layout: 'bottomRight',
					timeout: 1200,
					type: 'success'
				}).show();

			}).fail(function (data) {

				new Noty({
					text: data.responseJSON.message,
					theme: 'metroui',
					layout: 'bottomRight',
					timeout: 1200,
					type: 'error'
				}).show();
			})

		");
                WriteLiteral("});\r\n\r\n\r\n\t</script>\r\n\r\n\r\n\r\n\r\n");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
