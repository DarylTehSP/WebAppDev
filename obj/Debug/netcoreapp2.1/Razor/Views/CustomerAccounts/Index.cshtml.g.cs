#pragma checksum "D:\SP stuff\Web Development\kachoweded - Copy\Learner\TMS\Views\CustomerAccounts\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "63e40871bc23ce2a3bee7f7802ff5af6e95745b8"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_CustomerAccounts_Index), @"mvc.1.0.view", @"/Views/CustomerAccounts/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/CustomerAccounts/Index.cshtml", typeof(AspNetCore.Views_CustomerAccounts_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\SP stuff\Web Development\kachoweded - Copy\Learner\TMS\Views\_ViewImports.cshtml"
using TMS;

#line default
#line hidden
#line 2 "D:\SP stuff\Web Development\kachoweded - Copy\Learner\TMS\Views\_ViewImports.cshtml"
using TMS.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"63e40871bc23ce2a3bee7f7802ff5af6e95745b8", @"/Views/CustomerAccounts/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4b920ee378507dd0789e3303ed664c79361ef06d", @"/Views/_ViewImports.cshtml")]
    public class Views_CustomerAccounts_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-controller", "CustomerAccounts", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "Index", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("editForm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 5363, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "76bfd95523d047a4b64af363c5e09db9", async() => {
                BeginContext(6, 140, true);
                WriteLiteral("\r\n    <nav aria-label=\"breadcrumb\">\r\n        <ol class=\"breadcrumb \">\r\n            <li class=\"breadcrumb-item font-small\">\r\n                ");
                EndContext();
                BeginContext(146, 64, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "fcf574418c404342a8e2028f842f406b", async() => {
                    BeginContext(202, 4, true);
                    WriteLiteral("Home");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Controller = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(210, 2446, true);
                WriteLiteral(@"
            </li>
            <li class=""breadcrumb-item font-small active"">Manage Projects</li>

        </ol>   
        <div class=""card-header elegant-color white-text"">
            <h4 class=""one"" style=""padding-top:1.5%;"">
                Projects
            </h4>
            <div class=""card-body"">
                <div class=""row"">
                    <div class=""col-md-12"">
                        <div class=""float-right"">
                            <a id=""createOneNoteButton1""
                               href=""/CustomerAccounts/Create""
                               class=""btn btn-elegant btn-outline-default btn-group-sm ml-auto"">
                                + Add
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </nav>
    <div class=""row"">
        <div class=""table-responsive-md w-100"">
            <table class=""table"">
                <thead>
                 ");
                WriteLiteral(@"   <tr>
                        <th scope=""col"">Project Name</th>
                        <th scope=""col"">Comments</th>
                        <th scope=""col"">Visibility</th>
                        <th scope=""col"">CreatedBy</th>
                        <th scope=""col"">UpdatedBy</th>
                        <th scope=""col"">UpdatedAt</th>
                        <th scope=""col"">Edit</th>
                        <th scope=""col"">Delete</th>
                        <th scope=""col"">Go to</th>
                    </tr>
                </thead>
                <tbody id=""dataTableBody""></tbody>

            </table>
            <div id=""bottomNavigationInterfaceContainer""
                 class=""btn-toolbar float-right"" role=""toolbar""></div>
        </div>
    </div>
    <div class=""modal fade"" id=""editModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""exampleModalLabel"" aria-hidden=""true"">
        <div class=""modal-dialog"" role=""document"">
            <div class=""modal-content"">
            ");
                WriteLiteral(@"    <div class=""card"">
                    <div class=""card-header stylish-color-dark white-text"">
                        <h4 class=""one"" style=""padding-top:1.8%;"">Edit Projects</h4>
                    </div>
                    <div class=""card-body"" style=""padding:3% 6%"">
                        <p style=""padding-top:2%""><strong>General Information</strong></p>
                        ");
                EndContext();
                BeginContext(2656, 1085, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ebf94483d7ee49bba60056514e91873e", async() => {
                    BeginContext(2676, 1058, true);
                    WriteLiteral(@"
                            <div class=""form-group col-md-12"">
                                <label for=""accountNameInput"" class=""font-small font-weight-medium"">
                                    Project Name <a class="" d-inline"">*</a>
                                </label>
                                <input type=""text"" id=""accountNameInput"" name=""accountNameInput"" class=""form-control"" placeholder=""Enter Project Name..."">
                                <span></span>
                            </div>
                            <div class=""form-group col-md-12"">
                                <label for=""visiblityInput"" class=""font-small font-weight-medium"">
                                    Visibility * <input type=""checkbox"" id=""visibilityInput"" name=""visiblity"">
                                </label>
                            </div>
                            <div class=""form-group col-md-12"">
                                <p id=""message""></p>
                          ");
                    WriteLiteral("  </div>\r\n                        ");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(3741, 1615, true);
                WriteLiteral(@"
                    </div>
                    <div class=""modal-footer"">
                        <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Close</button>
                        <button id=""updateButton"" type=""button"" class=""btn btn-primary"">Update</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class=""modal fade"" id=""deleteModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""exampleModalLabel"" aria-hidden=""true"">
        <div class=""modal-dialog"" role=""document"">
            <div class=""modal-content"">
                <div class=""card"">
                    <div class=""card-header stylish-color-dark white-text"">
                        <h4 class=""one"" style=""padding-top:1.8%;"">Are you sure?</h4>
                    </div>
                    <div class=""form-group col-md-12"" style=""padding-top:2%"">
                        <div class=""form-group"" id=""deleteMessage"">
                        </div>
  ");
                WriteLiteral(@"                  </div>
                    <div class=""form-group col-md-12"" style=""padding-top:2%"">
                        <div class=""form-group"" id=""deletedAccount"">
                        </div>
                    </div>
                    <div class=""modal-footer"">
                        <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">No</button>
                        <button id=""deleteButton"" type=""button"" class=""btn btn-primary"">Yes</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(5363, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            DefineSection("scripts", async() => {
                BeginContext(5382, 11811, true);
                WriteLiteral(@"
    <style>
        #dataBottomNavigationContainer {
            min-height: 70px;
            max-height: 90px;
            border: 2px solid black;
            width: 300px;
        }
    </style>
    <script>
        (function ($, moment, window, document) {


            let pageSize = 3;//Fixed the page size to 5 per page
            //Call the loadData to begin fetching 1st set of 5 record data which fits into page 1
            loadData();
            function loadData() {

                $.ajax({
                    method: 'GET',
                    url: `/API/CustomerAccounts/GetCustomerAccountsPageByPage?page_number=1&per_page=${pageSize}`,
                    dataType: 'json',
                    async: true,
                    cache: false,
                }).done(function (data) {
                    //Obtain the maximum number of page information from the JSON data
                    let maximumNumberOfPages = data.last_page;
                    let numberOfRecord");
                WriteLiteral(@"s = data.total;
                    accountRate = data.records;
                    if (numberOfRecords > 0) {
                        //If there are any record data found, start
                        //calling the renderData function and pass in an array of record data objects
                        //into the function.
                        renderData(data.records);
                        $(""#backButton"").attr(""href"", ""/Timetable/ManageTimetable"" + accountRate.accountRateId);
                        //Call two more functions to generate ""page number buttons""
                        //inside the respective <div> parent container elements.

                        createNavigationButtonsAtBottom(maximumNumberOfPages);
                    } else {
                        $('#dataTableBody').append($(`<tr class=""row m-0"">
                                    <td class=""col-md-11 text-center text-muted"">
                                    <h4>No records found.</h4></td></tr>`));
           ");
                WriteLiteral(@"         }//End of if else to either display rows of data or display 'none found' message
                });//End of ajax().done()
            }//loadData
            //Retrieve data from database then tabulate them into a table
            function renderData(records) {
                $('#dataTableBody').html('');//Clear the <tbody> element first

                for (var index = 0; index < records.length; index++) {
                    //The for-loop code here begins building and inserting the cells<td> and rows<tr>
                    //into the <tbody> element. Note: Two rows are created during each pass of the loop.
                    let $cellElement = null;
                    let record = records[index];

                    //Start - Defining the first row element to hold the row number, deadline and done at information
                    let $rowElement = $('<tr></tr>');
                    $cellElement = $(`<th scope=""row"">${record.accountName}</th>`);
                    $rowEl");
                WriteLiteral(@"ement.append($cellElement);
                    $cellElement = $(`<td></td>`);
                    $rowElement.append($cellElement);
                    if (record.isVisible == true) {
                        $cellElement = $(`<td>&#x2713</td>`);
                        $rowElement.append($cellElement);
                    } else {
                        $cellElement = $(`<td>&#x2717</td>`);
                        $rowElement.append($cellElement);
                    }
                    $cellElement = $(`<td>${record.createdBy}</td>`);
                    $rowElement.append($cellElement);
                    $cellElement = $(`<td>${record.updatedBy}</td>`);
                    $rowElement.append($cellElement);
                    $cellElement = $(`<td>${moment(record.updatedAt).format('DD/MM/YYYY')}</td>`);//end of append()
                    $rowElement.append($cellElement);
                    $cellElement = $(`<td><button type=""button"" onclick=""retrieve(${record.customerAccountId})"" cl");
                WriteLiteral(@"ass=""fas fa-edit btn btn-primary"" data-toggle=""modal"" data-target=""#editModal""></button></td>`);//end of append()
                    $rowElement.append($cellElement);
                    $cellElement = $(`<td><button type=""button"" onclick=""deleteAccount(${record.customerAccountId})"" class=""fas fa-trash-alt btn btn-danger"" data-toggle=""modal"" data-target=""#deleteModal""></button></td>`);//end of append()
                    $rowElement.append($cellElement);
                    $cellElement = $(`<td><button id=""try"" type=""button"" onclick=""getId(${record.customerAccountId})"" class=""btn btn-primary dropdown-toggle"" data-toggle=""dropdown"" data-myAttribute=""customerAccountId"">Manage</button><div class=""dropdown-menu"">
                                                <a class=""dropdown-item"" href=""/CustomerAccounts/ManageCustomerComments/${record.customerAccountId}"" > >> Comments</a>
                                                <a class=""dropdown-item"" href=""/CustomerAccounts/ManageInstructorAssignment/${rec");
                WriteLiteral(@"ord.customerAccountId}"" > >> Assign Planner</a>
                                         </div></td>`);//end of append()
                    $rowElement.append($cellElement)
                    $('#dataTableBody').append($rowElement);
                    //End-- Defining the second row element to hold note information
                }//end of for loop
            }//end of renderData function
            function createNavigationButtonsAtBottom(inMaximumNumOfPages) {
                $('#bottomNavigationInterfaceContainer').text('');
                for (let count = 1; count <= inMaximumNumOfPages; count++) {
                    //Create a styled <a> element which appears as page number button interface
                    let $pageNumberButtonLinkElement =
                        $(`<a href=\""#\"" data-page-number=""${count}""data-page-size=""${pageSize}"" class=""btn btn-secondary"" >${count}</a>&nbsp;`);
                    //Register an anonymous function to handle the <a> element's
               ");
                WriteLiteral(@"     //click event.
                    $pageNumberButtonLinkElement.on('click', function (event) {
                        event.preventDefault();
                        let pageSize = $(event.target).data('page-size');//no need .data('data-page-size')
                        let pageNumber = $(event.target).data('page-number');
                        $.ajax({
                            method: ""GET"",
                            url:
                                `/API/CustomerAccounts/GetCustomerAccountsPageByPage?page_number=${pageNumber}&per_page=${pageSize}`,
                            dataType: ""json"",
                            async: true,
                            cache: false
                        }).done(function (data) {
                            //Call the renderData and pass in the array of record data
                            renderData(data.records);

                            createNavigationButtonsAtTop(maximumNumberOfPages);
                        })//End");
                WriteLiteral(@" of ajax().done()
                    });//End of .on('click', function{....})
                    $('#bottomNavigationInterfaceContainer').append($pageNumberButtonLinkElement);
                }//End of for loop
            }//End of createNavigationButtonsAtBottom function
        })($, moment, window, window.document)

        function WebFormData(inAccountName, inVisibiliy) {
            this.accountName = inAccountName;
            this.visible = inVisibiliy;
        }
        //To retrieve respective data
        function retrieve(id) {
            $.ajax({
                method: 'GET',
                url: `/API/CustomerAccounts/GetCustomerAccount/` + id,
                dataType: 'json',

            }).done(function (data) {
                console.log(data);
                let customer = data;

                let accountName = customer.accountName;
                let visibility = customer.visibility;
                let createdAt = customer.createdAt;
                let");
                WriteLiteral(@" createdBy = customer.createdBy;
                let updatedAt = customer.updatedAt;
                let updatedBy = customer.updatedBy;
                //To assign value to respective html component
                $('#accountNameInput').val(accountName);
                if (visibility == true) {
                    document.getElementById(""visibilityInput"").checked = true;
                } else {
                    document.getElementById(""visibilityInput"").checked = false;
                }
                document.getElementById(""message"").innerHTML = ""Creation timestamp "" + createdAt + "" by "" + createdBy + "" Last modified timestamp : "" + updatedAt + "" by "" + updatedBy;

            });
            //To update the account once the update button is clicked
            $('#updateButton').on('click', function () {
                let collectedAccountName = $('#accountNameInput').val();
                var x = null;
                if (document.getElementById('visibilityInput').checked) {
");
                WriteLiteral(@"                    x = true;
                } else {
                    x = false;
                }
                let collectedVisibility = x;

                let webFormData = new WebFormData(collectedAccountName, collectedVisibility);

                $.ajax({
                    method: 'PUT',
                    url: `/API/CustomerAccounts/UpdateCustomerAccount/` + id,
                    dataType: 'json',
                    contentType: 'application/x-www-form-urlencoded;',
                    data: webFormData
                }).done(function (data) {
                    new Noty({ text: data.message, type: 'success', layout: 'center' }).show();
                }).fail(function (data) {
                    new Noty({
                        text: data.responseJSON.message, type: 'error', layout: 'center'
                    }).show();
                });
            });
        }
        //To delete account
        function deleteAccount(id) {
            $.ajax({
     ");
                WriteLiteral(@"           method: 'GET',
                url: `/API/CustomerAccounts/GetCustomerAccountSummary/` + id,
                dataType: 'json',

            }).done(function (data) {
                console.log(data);
                let customer = data;

                let accountName = customer.accountName;
                let accountRateCount = customer.accountRateCount;
                let accountCommentCount = customer.commentCount;
                let instructorCount = customer.instructorCount;

                //This will load a customer account summary to alert the user
                document.getElementById(""deleteMessage"").innerHTML = ""You Got "" + accountRateCount + "" project rate records.\n"" + accountCommentCount + "" comments. \n""
                    + instructorCount + "" planner relationship records will be deleted"";

                document.getElementById(""deletedAccount"").innerHTML = ""DELETE "" + accountName;
            });
            //To delete the account rate
            $(");
                WriteLiteral(@"'#deleteButton').on('click', function () {

                $.ajax({
                    method: 'DELETE',
                    url: `/API/CustomerAccounts/DeleteCustomerAccount/` + id
                }).done(function (data) {
                    new Noty({ text: data.message, type: 'success', layout: 'center' }).show();
                }).fail(function (data) {
                    new Noty({ text: data.responseJSON.message, type: 'error', layout: 'center' }).show();
                });
            })
        }


    </script>
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
