#pragma checksum "D:\SP stuff\Web Development\kachoweded - Copy\Learner\TMS\Views\CustomerAccounts\ManageInstructorAssignment.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "561b841034a098f16f51ec54083ad1914822951a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_CustomerAccounts_ManageInstructorAssignment), @"mvc.1.0.view", @"/Views/CustomerAccounts/ManageInstructorAssignment.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/CustomerAccounts/ManageInstructorAssignment.cshtml", typeof(AspNetCore.Views_CustomerAccounts_ManageInstructorAssignment))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\SP stuff\Web Development\kachoweded - Copy\Learner\TMS\Views\_ViewImports.cshtml"
using TMS;

#line default
#line hidden
#line 2 "D:\SP stuff\Web Development\kachoweded - Copy\Learner\TMS\Views\_ViewImports.cshtml"
using TMS.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"561b841034a098f16f51ec54083ad1914822951a", @"/Views/CustomerAccounts/ManageInstructorAssignment.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4b920ee378507dd0789e3303ed664c79361ef06d", @"/Views/_ViewImports.cshtml")]
    public class Views_CustomerAccounts_ManageInstructorAssignment : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 1068, true);
            WriteLiteral(@"<div class=""card col-30"">
    <div class=""card-header elegant-color white-text"">
        <div class=""container-fluid"">
            <div class=""row vertical-align"">
                <h3 style=""padding-top:11px;"">Manage Financial Planner</h3>
                <button id=""buttonCreate"" type=""button"" class=""btn btn-elegant btn-outline-default btn-group-sm ml-auto"" data-toggle=""modal"" data-target=""#aboutModal"">
                    +Assign planner
                </button>
            </div>
        </div>
    </div>
</div>

<button id=""unassignButton"" type=""button"" class="" float-right btn btn-primary btn-group-sm ml-auto"" disabled>
    Unassign planner
</button>

<table id=""tableData"" class=""table table-bordered table-striped"">
    <thead>
        <tr class=""text-center"">
            <th></th>
            <th>Full Name</th>
            <th>Email</th>
            <th>Wage rate per hour</th>
            <th>Created At</th>
            <th>Assigned By</th>
        </tr>
    </thead>
    <tbo");
            WriteLiteral("dy id=\"tableBody\"></tbody>\r\n</table>\r\n\r\n\r\n\r\n");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(1085, 3925, true);
                WriteLiteral(@"
    <style>
    </style>
    <script>
        const ID = getIdFromAddressBar();
        // Get id from address bar
        function getIdFromAddressBar() {
            let urlArray = window.location.href.split('/');
            let id = urlArray[urlArray.length - 1];
            return id;
        };

        // AJAX GET to output into table
        $.ajax({
            url: '/API/Instructor/GetAssignInstructor/' + ID,
            method: 'GET'

        }).done(function (data) {
            console.dir(data);
            let $tableBodyElement = $('#tableBody');
            for (let index = 0; index < data.length; index++) {
                let $rowElement = null;
                let $cellElement = null;
                let checkBox = $('<input>')
                    .attr(""id"", ""instructAccountIdInput_"" + data[index].instructorAccountId)
                    .attr(""type"", ""checkbox"")
                    .attr(""name"", ""instructorAccountIdInput"")
                    .attr('value', dat");
                WriteLiteral(@"a[index].instructorAccountId)
                $rowElement = $('<tr></tr>');

                $cellElement = $('<td></td>')
                $cellElement.append(checkBox);
                $rowElement.append($cellElement);

                $cellElement = $('<td></td>', { text: data[index].fullName })
                $rowElement.append($cellElement);

                $cellElement = $('<td></td>', { text: data[index].email });
                $rowElement.append($cellElement);

                $cellElement = $('<td></td>', { text: data[index].wageRate });
                $rowElement.append($cellElement);

                $cellElement = $('<td></td>', { text: data[index].createdAt });
                $rowElement.append($cellElement);

                $cellElement = $('<td></td>', { text: data[index].createdBy });
                $rowElement.append($cellElement);

                $tableBodyElement.append($rowElement);
            }

            $('input[type=""checkbox""]').click(function () {");
                WriteLiteral(@"
                console.dir(""in"");
                if ($('#tableBody :checkbox:checked').length > 0) {
                    console.log(""false"");
                    $('#unassignButton').prop('disabled', false);
                }
                else {
                    console.log(""true"");
                    $('#unassignButton').prop('disabled', true);
                }
            });
        })
        // unassign all instructor checked when click
        $(""#unassignButton"").on('click', function (event) {
            let $elements = $('input[type=""checkbox""]:checked');
            let instructorAccountIdList = [];

            $elements.each(function () {
                instructorAccountIdList.push($(this).val());
            })
            $.ajax({
                method: ""DELETE"",
                url: `/API/Instructor/UnAssignInstructorFromCustomerAccount?value=${instructorAccountIdList.join(',')}`,
                dataType: ""json"",
                async: true, 
             ");
                WriteLiteral(@"   cache: false

            }).done(function (data) {
                let $elements = $('input[type=checkbox]:checked');
                let $rowElements = $elements.parent().parent();
                $rowElements.fadeOut(1000);
                new Noty({
                    text: data.message,
                    theme: 'metroui',
                    layout: 'bottomRight',
                    timeout: 3000,
                    type: 'success'
                }).show();

            }).fail(function (data) {
                console.dir(data);
            })
        })
        // Activate create button
        $('#buttonCreate').click(function () {
            window.location = '/CustomerAccounts/AssignInstructors/' + ID;
            //window.location = '/Experiments/demoServerPaging/' + ID;
        });
    </script>
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
