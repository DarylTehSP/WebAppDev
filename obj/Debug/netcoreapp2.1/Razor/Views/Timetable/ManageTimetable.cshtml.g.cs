#pragma checksum "D:\SP stuff\Web Development\kachoweded - Copy\Learner\TMS\Views\Timetable\ManageTimetable.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "7a446af5fd0e7b72c43576fa6a3bd5603749ce09"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Timetable_ManageTimetable), @"mvc.1.0.view", @"/Views/Timetable/ManageTimetable.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Timetable/ManageTimetable.cshtml", typeof(AspNetCore.Views_Timetable_ManageTimetable))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\SP stuff\Web Development\kachoweded - Copy\Learner\TMS\Views\_ViewImports.cshtml"
using TMS;

#line default
#line hidden
#line 2 "D:\SP stuff\Web Development\kachoweded - Copy\Learner\TMS\Views\_ViewImports.cshtml"
using TMS.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7a446af5fd0e7b72c43576fa6a3bd5603749ce09", @"/Views/Timetable/ManageTimetable.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4b920ee378507dd0789e3303ed664c79361ef06d", @"/Views/_ViewImports.cshtml")]
    public class Views_Timetable_ManageTimetable : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-controller", "CustomerAccounts", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "Index", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "1", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "2", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "3", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "4", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "5", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "6", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "7", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("editForm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/datepicker/datepicker.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/datepicker/datepicker.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 11565, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "b785d44b835b462685dca1d489bebff2", async() => {
                BeginContext(6, 140, true);
                WriteLiteral("\r\n    <nav aria-label=\"breadcrumb\">\r\n        <ol class=\"breadcrumb \">\r\n            <li class=\"breadcrumb-item font-small\">\r\n                ");
                EndContext();
                BeginContext(146, 64, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "58d2c7dab38642249ef973c20d78eec7", async() => {
                    BeginContext(202, 4, true);
                    WriteLiteral("Home");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Controller = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(210, 97, true);
                WriteLiteral("\r\n            </li>\r\n            <li class=\"breadcrumb-item font-small active\">\r\n                ");
                EndContext();
                BeginContext(307, 84, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "fb16e763a4b441209658e5c16d64b81b", async() => {
                    BeginContext(363, 24, true);
                    WriteLiteral("Manage Customer Accounts");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Controller = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(391, 2483, true);
                WriteLiteral(@"
            </li>
            <li class=""breadcrumb-item font-small active"">
                <a id=""retrieveId"">Manage Account Rates</a>
            </li>
            <li class=""breadcrumb-item font-small active"">Manage Timetable</li>
        </ol>
        <div class=""card-header elegant-color white-text"">
            <h4 id=""name"" class=""one"" style=""padding-top:1.5%;"">
            </h4>
            <div class=""card-body"">
                <div class=""row"">
                    <div class=""col-md-12"">
                        <div class=""float-right"">
                            <div class=""float-right"" id=""createTimetable"">
                                <a class=""btn btn-elegant btn-outline-default btn-group-sm ml-auto"" href=""/Timetable/Create/"">
                                    + Add
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </nav>
 ");
                WriteLiteral(@"   <div class=""row"">
        <div class=""table-responsive-md w-100"">
            <table class=""table"">
                <thead>
                    <tr>
                        <th scope=""col"">No.</th>
                        <th scope=""col"">Day</th>
                        <th scope=""col"">Start Time</th>
                        <th scope=""col"">End Time</th>
                        <th scope=""col"">Start Date</th>
                        <th scope=""col"">End Date</th>
                        <th scope=""col"">Visibility</th>
                        <th scope=""col""></th>
                        <th scope=""col""></th>

                    </tr>
                </thead>
                <tbody id=""dataTableBody""></tbody>
            </table>
            <div id=""bottomNavigationInterfaceContainer""
                 class=""btn-toolbar float-right"" role=""toolbar""></div>
        </div>
    </div>
    <div class=""modal fade"" id=""editModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""exampleModalLabel");
                WriteLiteral(@""" aria-hidden=""true"">
        <div class=""modal-dialog"" role=""document"">
            <div class=""modal-content"">
                <div class=""card"">
                    <div class=""card-header stylish-color-dark white-text"">
                        <h4 class=""one"" style=""padding-top:1.8%;"">Edit Timetable</h4>
                    </div>
                    <div class=""card-body"" style=""padding:3% 6%"">
                        ");
                EndContext();
                BeginContext(2874, 3640, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eced22332be74ee3a32fb1b88e8dfd20", async() => {
                    BeginContext(2894, 400, true);
                    WriteLiteral(@"
                            <div class=""form-group col-md-12"">
                                <label for=""dayOfWeek"" class=""font-small font-weight-medium"">
                                    Choose Day Of Week <a class="" d-inline"">*</a>
                                </label>
                                <select id=""dayOfWeek"" class=""form-control"">
                                    ");
                    EndContext();
                    BeginContext(3294, 33, false);
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c9ea167d600e4768a16996d8a328b87b", async() => {
                        BeginContext(3312, 6, true);
                        WriteLiteral("Monday");
                        EndContext();
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                    __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
                    __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    EndContext();
                    BeginContext(3327, 38, true);
                    WriteLiteral("\r\n                                    ");
                    EndContext();
                    BeginContext(3365, 34, false);
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4834abd2fc3b44fc9408aad7f5c05a60", async() => {
                        BeginContext(3383, 7, true);
                        WriteLiteral("Tuesday");
                        EndContext();
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                    __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
                    __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    EndContext();
                    BeginContext(3399, 38, true);
                    WriteLiteral("\r\n                                    ");
                    EndContext();
                    BeginContext(3437, 36, false);
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3cabd7e5833743339cbd120ccb86122d", async() => {
                        BeginContext(3455, 9, true);
                        WriteLiteral("Wednesday");
                        EndContext();
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                    __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
                    __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    EndContext();
                    BeginContext(3473, 38, true);
                    WriteLiteral("\r\n                                    ");
                    EndContext();
                    BeginContext(3511, 35, false);
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "2b0e61bd5e1b4be5be0aaab841320e51", async() => {
                        BeginContext(3529, 8, true);
                        WriteLiteral("Thursday");
                        EndContext();
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                    __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_5.Value;
                    __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    EndContext();
                    BeginContext(3546, 38, true);
                    WriteLiteral("\r\n                                    ");
                    EndContext();
                    BeginContext(3584, 33, false);
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "87b29322b06246feb4492e29bc68f7fa", async() => {
                        BeginContext(3602, 6, true);
                        WriteLiteral("Friday");
                        EndContext();
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                    __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_6.Value;
                    __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_6);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    EndContext();
                    BeginContext(3617, 38, true);
                    WriteLiteral("\r\n                                    ");
                    EndContext();
                    BeginContext(3655, 35, false);
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1aeeb0fc996a416fa74b1bcfcad3c028", async() => {
                        BeginContext(3673, 8, true);
                        WriteLiteral("Saturday");
                        EndContext();
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                    __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_7.Value;
                    __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_7);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    EndContext();
                    BeginContext(3690, 38, true);
                    WriteLiteral("\r\n                                    ");
                    EndContext();
                    BeginContext(3728, 33, false);
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f53c4f87e50c4b018baf77fdc91c077d", async() => {
                        BeginContext(3746, 6, true);
                        WriteLiteral("Sunday");
                        EndContext();
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                    __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_8.Value;
                    __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    EndContext();
                    BeginContext(3761, 2746, true);
                    WriteLiteral(@"
                                </select>
                                <span></span>
                            </div>
                            <div class=""form-group col-md-12"">
                                <label for=""startTimeInput"" class=""font-small font-weight-medium"">
                                    Pick a Start Time *
                                </label>
                                <input type=""time"" id=""startTimeInput1"" class=""form-control""
                                       name=""startTimeInput"" placeholder=""dd/MM/YYYY"" required />
                                <div id=""msgStartTime""></div>
                            </div>
                            <div class=""form-group col-md-12"">
                                <label for=""endTimeInput"" class=""font-small font-weight-medium"">
                                    Pick an End Time *
                                </label>
                                <input type=""time"" id=""endTimeInput1"" class=""form");
                    WriteLiteral(@"-control""
                                       name=""endTimeInput"" placeholder=""dd/MM/YYYY"" required />
                                <div id=""msgEndTime""></div>
                            </div>
                            <div class=""form-group col-md-12"">
                                <label for=""startDateInput"" class=""font-small font-weight-medium"">
                                    Pick a Start Date *
                                </label>
                                <input type=""text"" id=""startDateInput"" class=""form-control""
                                       data-toggle=""datepicker"" name=""startDateInput"" placeholder=""dd/MM/YYYY"" />
                                <div id=""msgStartDate""></div>
                            </div>
                            <div class=""form-group col-md-12"">
                                <label for=""endDateInput"" class=""font-small font-weight-medium"">
                                    Pick an End Date *
                               ");
                    WriteLiteral(@" </label>
                                <input type=""text"" id=""endDateInput"" class=""form-control""
                                       data-toggle=""datepicker"" name=""endDateInput"" placeholder=""dd/MM/YYYY"" />
                                <div id=""msgEndDate""></div>
                            </div>
                            <div class=""form-group col-md-12"">
                                <label for=""visiblityInput"" class=""font-small font-weight-medium"">
                                    Visibility * <input type=""checkbox"" id=""visibilityInput"" name=""visiblity"" checked>
                                </label>
                            </div>
                        ");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(6514, 5044, true);
                WriteLiteral(@"
                    </div>
                    <div class=""modal-footer"">
                        <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Close</button>
                        <button id=""updateButton"" type=""button"" class=""btn btn-primary"">Update</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class=""modal fade"" id=""deleteModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""exampleModalLabel"" aria-hidden=""true"">
        <div class=""modal-dialog"" role=""document"">
            <div class=""modal-content"">
                <div class=""card"">
                    <div class=""card-header stylish-color-dark white-text"">
                        <h4 class=""one"" style=""padding-top:1.8%;"">Are you sure?</h4>
                    </div>
                    <div class=""form-group col-md-12"" style=""padding-top:2%"">
                        <div class=""form-group"" id=""deleteMessage"">
                        </div>
  ");
                WriteLiteral(@"                  </div>
                    <div class=""modal-footer"">
                        <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">No</button>
                        <button id=""deleteButton"" type=""button"" class=""btn btn-primary"">Yes</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class=""modal fade"" id=""messageModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""exampleModalLabel"" aria-hidden=""true"">
        <div class=""modal-dialog"" role=""document"">
            <div class=""modal-content"">
                <div class=""card"">
                    <div class=""card-header stylish-color-dark white-text"">
                        <h4 class=""one"" style=""padding-top:1.8%;"">Failed to update record. Your account timetable is the same as the following existing record.</h4>
                    </div>
                    <div class=""form-group col-md-12"" style=""padding-top:2%"">
                        <div cla");
                WriteLiteral(@"ss=""form-group"" id=""showingMessage"">
                            <table class=""table"">
                                <thead>
                                    <tr>
                                        <th scope=""col"" style=""padding-left:1.8%;"">Day</th>
                                        <th scope=""col"">Start Time</th>
                                        <th scope=""col"">End Time</th>
                                        <th scope=""col"">Start Date</th>
                                        <th scope=""col"">End Date</th>
                                        <th scope=""col"">Visibility</th>

                                    </tr>
                                </thead>
                                <tbody id=""output""></tbody>
                            </table>
                        </div>
                    </div>
                    <div class=""modal-footer"">
                        <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Close</butt");
                WriteLiteral(@"on>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class=""modal fade"" id=""overlapModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""exampleModalLabel"" aria-hidden=""true"">
        <div class=""modal-dialog"" role=""document"">
            <div class=""modal-content"">
                <div class=""card"">
                    <div class=""card-header stylish-color-dark white-text"">
                        <h4 class=""one"" style=""padding-top:1.8%;"">Are you sure? Your account timetable overlap with the following existing record.</h4>
                    </div>
                    <div class=""form-group col-md-12"" style=""padding-top:2%"">
                        <div class=""form-group"" id=""showingMessage"">
                            <table class=""table"">
                                <thead>
                                    <tr>
                                        <th scope=""col"" style=""padding-left:1.8%;"">Day</th>
                         ");
                WriteLiteral(@"               <th scope=""col"">Start Time</th>
                                        <th scope=""col"">End Time</th>
                                        <th scope=""col"">Start Date</th>
                                        <th scope=""col"">End Date</th>
                                        <th scope=""col"">Visibility</th>
                                    </tr>
                                </thead>
                                <tbody id=""overlapoutput""></tbody>
                            </table>
                        </div>
                    </div>
                    <div class=""modal-footer"">
                        <button type=""button"" id=""updateAny"" class=""btn btn-secondary"">Update</button>
                        <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(11565, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            DefineSection("scripts", async() => {
                BeginContext(11584, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(11590, 68, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "4e1930b1f4eb4698a369f8003fef2eff", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(11658, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(11664, 58, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5600bd8210824d7cb93ce674d9485e6b", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(11722, 25329, true);
                WriteLiteral(@"
    <script>
        //To extract id from address bar
        const ID = getIdFromAddressBar();
        function getIdFromAddressBar() {
            let urlArray = window.location.href.split('/');
            let id = urlArray[urlArray.length - 1];
            return id;
        }
        (function ($, moment, window, document) {
            let pageSize = 10;
            loadData();
            //load data from the web api method
            function loadData() {
                $.ajax({
                    method: 'GET',
                    url: `/API/Timetable/GetCustomerAccountTimetablePageByPage/${ID}?page_number=1&per_page=${pageSize}`,
                    dataType: 'json',
                    async: true,
                    cache: false,
                }).done(function (data) {
                    //Obtain the maximum number of page information from the JSON data
                    let maximumNumberOfPages = data.last_page;
                    let numberOfRecords = data.total");
                WriteLiteral(@";
                    if (numberOfRecords > 0) {
                        renderData(data.records);
                        createNavigationButtonsAtBottom(maximumNumberOfPages);
                    }
                    else {
                        
                        document.getElementById(""name"").innerHTML = ""There is no timetable under this account rate"";
                        var link = ""/Timetable/Create/"" + ID;
                        document.getElementById('createTimetable').innerHTML = '<a class=""btn btn-primary"" href=""' + link + '"">+ Add</a>';
                        $('#dataTableBody').append($(`<tr class=""row m-0"">
                                                                                <td class=""col-md-11 text-center text-muted"">
                                                                                <h4>No records found.</h4></td></tr>`));

                    }//End of if else to either display rows of data or display 'none found' message

             ");
                WriteLiteral(@"   });//End of ajax().done()
            }//loadData
            function createNavigationButtonsAtBottom(inMaximumNumOfPages) {
                $('#bottomNavigationInterfaceContainer').text('');
                for (let count = 1; count <= inMaximumNumOfPages; count++) {
                    //Create a styled <a> element which appears as page number button interface
                    let $pageNumberButtonLinkElement =
                        $(`<a href=\""#\"" data-page-number=""${count}""data-page-size=""${pageSize}"" class=""btn btn-secondary"" >${count}</a>&nbsp;`);
                    //Register an anonymous function to handle the <a> element's
                    //click event.
                    $pageNumberButtonLinkElement.on('click', function (event) {
                        event.preventDefault();
                        let pageSize = $(event.target).data('page-size');//no need .data('data-page-size')
                        let pageNumber = $(event.target).data('page-number');
           ");
                WriteLiteral(@"             $.ajax({
                            method: ""GET"",
                            url:
                                `/API/CustomerAccounts/GetCustomerAccountsPageByPage?page_number=${pageNumber}&per_page=${pageSize}`,
                            dataType: ""json"",
                            async: true,
                            cache: false
                        }).done(function (data) {
                            //Call the renderData and pass in the array of record data
                            renderData(data.records);
                            createNavigationButtonsAtTop(maximumNumberOfPages);
                        })//End of ajax().done()
                    });//End of .on('click', function{....})
                    $('#bottomNavigationInterfaceContainer').append($pageNumberButtonLinkElement);
                }//End of for loop
            }//End of createNavigationButtonsAtBottom function
            //Retrieve data from database then tabulate them into a ta");
                WriteLiteral(@"ble
            function renderData(records) {
                $('#dataTableBody').html('');//Clear the <tbody> element first

                for (var index = 0; index < records.length; index++) {
                    //The for-loop code here begins building and inserting the cells<td> and rows<tr>
                    //into the <tbody> element. Note: Two rows are created during each pass of the loop.
                    let $cellElement = null;
                    let record = records[index];
                    let num = index + 1
                    //To load account name
                    document.getElementById(""name"").innerHTML = ""Timetable for "" + record.customerName + "" rate "" + record.accountRate + ""/hour"";

                    if (num == 1) {
                        $(""#retrieveId"").attr(""href"", ""/AccountRates/ManageAccountRates/"" + record.customerAccountId);
                        //document.getElementById(""customerAccountName"").innerHTML = ""Create Account Rate for "" + record.cust");
                WriteLiteral(@"omerAccountName;

                    }
                    console.dir(record.accountRate);
                    //Start - Defining row element
                    let $rowElement = $('<tr></tr>');
                    //Defining cell element
                    $cellElement = $(`<th scope=""row"">${num}</th>`);
                    $rowElement.append($cellElement);;
                    $cellElement = $(`<td>${record.day}</td>`);
                    $rowElement.append($cellElement);
                    $cellElement = $(`<td>${moment(record.startDate).format('hh:mm A')}</td>`);
                    $rowElement.append($cellElement);
                    $cellElement = $(`<td>${moment(record.endDate).format('hh:mm A')}</td>`);
                    $rowElement.append($cellElement);
                    $cellElement = $(`<td>${moment(record.startDate).format('DD/MM/YYYY')}</td>`);
                    $rowElement.append($cellElement);
                    $cellElement = $(`<td>${moment(record.endDate).forma");
                WriteLiteral(@"t('DD/MM/YYYY')}</td>`);
                    $rowElement.append($cellElement);
                    if (record.isVisible == true) {
                        $cellElement = $(`<td>&#x2713</td>`);
                        $rowElement.append($cellElement);
                    } else {
                        $cellElement = $(`<td>&#x2717</td>`);
                        $rowElement.append($cellElement);
                    }
                    $cellElement = $(`<td><button type=""button"" onclick=""retrieve(${record.accountTimetableId})""class=""fas fa-edit btn btn-primary"" data-toggle=""modal"" data-target=""#editModal""></button></td>`);//end of append()
                    $rowElement.append($cellElement);
                    $cellElement = $(`<td><button type=""button"" onclick=""deleteAccount(${record.accountTimetableId})"" class=""fas fa-trash-alt btn btn-danger"" data-toggle=""modal"" data-target=""#deleteModal""></button></td>`);//end of append()
                    $rowElement.append($cellElement);
             ");
                WriteLiteral(@"       $('#dataTableBody').append($rowElement);
                    //append the cell element to row element then to the table
                    var link = ""/Timetable/Create/"" + record.accountRateId;
                    document.getElementById('createTimetable').innerHTML = '<a class=""btn btn-elegant btn-outline-default btn-group-sm ml-auto"" href=""' + link + '"">+ Add</a>';
                }//end of for loop
            }//end of renderData function
        })($, moment, window, window.document)
        $(function () {
            $('[data-toggle=""datepicker""]').datepicker({
                autoHide: true,
                zIndex: 2048,
                format: 'DD/MM/YYYY'
            });

        });
        //To retrieve respective data
        function retrieve(id) {
            $.ajax({
                method: 'GET',
                url: `/API/Timetable/GetAccountTimetable/` + id,
                dataType: 'json',

            }).done(function (data) {
                console.log(d");
                WriteLiteral(@"ata);
                let customer = data;

                let dayNum = customer.day;
                if (dayNum == 1) {
                    $('#dayOfWeek').val(1);
                } else if (dayNum == 2) {
                    $('#dayOfWeek').val(2);
                } else if (dayNum == 3) {
                    $('#dayOfWeek').val(3);
                } else if (dayNum == 4) {
                    $('#dayOfWeek').val(4);
                } else if (dayNum == 5) {
                    $('#dayOfWeek').val(5);
                } else if (dayNum == 6) {
                    $('#dayOfWeek').val(6);
                } else if (dayNum == 7) {
                    $('#dayOfWeek').val(7);
                }
                let startDate = customer.startDate;
                let endDate = customer.endDate;
                let startTime = customer.startTime;
                let endTime = customer.endTime;
                let visibility = customer.visibility;
                //To assign value to respectiv");
                WriteLiteral(@"e html component
                $('#startDateInput').val(startDate);
                $('#startTimeInput1').val(startTime);
                $('#endDateInput').val(endDate);
                $('#endTimeInput1').val(endTime);
                if (visibility == true) {
                    document.getElementById(""visibilityInput"").checked = true;
                } else {
                    document.getElementById(""visibilityInput"").checked = false;
                }
            });

            function WebFormData(inDayNum, inStartDateAndTime, inEndDateAndTime, inVisible) {
                this.dayOfNum = inDayNum;
                this.startDateAndTime = inStartDateAndTime;
                this.endDateAndTime = inEndDateAndTime;
                this.isVisible = inVisible;
            }

            //Validate date format (done)
            $.validator.addMethod('validDate', function (value, element) {
                return this.optional(element) || moment(value, 'DD/MM/YYYY').isValid();
  ");
                WriteLiteral(@"          }, 'Please enter a valid date in the format DD/MM/YYYY');



            $('#editForm').validate({
                rules: {
                    startTimeInput1: {
                        required: true,
                        validTime: true
                    },
                    endtTimeInput1: {
                        required: true,
                    },
                    visiblityInput: {
                        required: true
                    },
                    startDateInput: {
                        required: true,
                        validDate: true
                    },
                    endDateInput: {
                        required: true,
                        validDate: true
                    }

                },
                messages: {
                    startTimeInput: {
                        required: 'Start time is required',
                    },
                    endTimeInput: {
                        required");
                WriteLiteral(@": 'End time is required',
                    },
                    visiblityInput: {
                        required: 'Visibilty is required',
                    },
                    startDateInput: {
                        required: 'Start Date is required'
                    },
                    endDateInput: {
                        required: 'End Date is required'
                    }
                }
            });
            //To update the account once the update button is clicked
            $('#updateButton').on('click', function () {
                var customer = $.ajax({
                    method: 'GET',
                    url: `/API/AccountRates/GetCustomerAccountRate/` + ID,
                    async: false,
                    success: function (data) {
                        let a = data;
                        return a;
                    }
                }).responseJSON;

                var trules = true;
                var irules = true;
   ");
                WriteLiteral(@"             var drules = true;
                var edrules = true;

                var st = minFromMidnight($('#startTimeInput1').val());
                var et = minFromMidnight($('#endTimeInput1').val());
                if (st > et) {
                    document.getElementById(""msgStartTime"").innerHTML = ""Must before end time"";
                    trules = false;
                } else {
                    document.getElementById(""msgStartTime"").innerHTML = """";
                }

                var checkSInterval = $('#startTimeInput1').val().split("":"").pop();
                var checkEInterval = $('#endTimeInput1').val().split("":"").pop();
                if (checkSInterval != 0 && checkSInterval != 15 && checkSInterval != 30 && checkSInterval != 45) {
                    document.getElementById(""msgStartTime"").innerHTML = ""Only accept 15 minutes interval"";
                    irules = false;
                }
                if (checkEInterval != 0 && checkEInterval != 15 && checkEI");
                WriteLiteral(@"nterval != 30 && checkEInterval != 45) {
                    document.getElementById(""msgEndTime"").innerHTML = ""Only accept 15 minutes interval"";
                    irules = false;
                }

                var From = $('#startDateInput').val();
                var To = $('#endDateInput').val();
                var strSplitFrom = From.split('/');
                var myDateFrom = new Date();
                myDateFrom.setFullYear(strSplitFrom[2], strSplitFrom[1] - 1, strSplitFrom[0]);

                var strSplitTo = To.split('/')
                myDateTo = new Date();
                myDateTo.setFullYear(strSplitTo[2], strSplitTo[1] - 1, strSplitTo[0]);

                var start = moment(customer.effectiveStartDate).format('DD/MM/YYYY');
                var end = moment(customer.effectiveEndDate).format('DD/MM/YYYY');
                var strSplitEFrom = start.split('/');
                var myEDateFrom = new Date();
                myEDateFrom.setFullYear(strSplitEFrom[2], strSp");
                WriteLiteral(@"litEFrom[1] - 1, strSplitEFrom[0]);

                var strSplitFTo = end.split('/')
                myFDateTo = new Date();
                myFDateTo.setFullYear(strSplitFTo[2], strSplitFTo[1] - 1, strSplitFTo[0]);

                console.dir(start);
                if (myDateFrom < myEDateFrom+1) {
                    document.getElementById(""msgStartDate"").innerHTML = ""Cannot be earlier than effective start date"";
                    drules = false;
                }
                console.dir(end);
                if (myDateTo > myFDateTo) {
                    document.getElementById(""msgEndDate"").innerHTML = ""Cannot be later than effective end date"";
                    drules = false;
                }

                if (myDateFrom > myDateTo) {
                    document.getElementById(""msgEndDate"").innerHTML = ""End Date must greater than start date"";
                    edrules = false;
                    console.dir(""here"");
                }

                if (trule");
                WriteLiteral(@"s == true && irules == true && drules == true && edrules == true) {
                    document.getElementById(""msgStartDate"").innerHTML = """";
                    document.getElementById(""msgEndDate"").innerHTML = """";
                }


                if ($('#editForm').valid() && trules == true && drules == true && irules == true && edrules == true) {
                    var x = document.getElementById('dayOfWeek').value;
                    let collectedDayNum = x;
                    let collectedStartDate = $('#startDateInput').val();
                    let collectedStartTime = $('#startTimeInput1').val();
                    let collectedEndDate = $('#endDateInput').val();
                    let collectedEndTime = $('#endTimeInput1').val();
                    var y = null;
                    if (document.getElementById('visibilityInput').checked) {
                        y = true;
                    } else {
                        y = false;
                    }
             ");
                WriteLiteral(@"       let collectedVisibility = y;
                    let scombine = collectedStartDate + "" "" + collectedStartTime;
                    let ecombine = collectedEndDate + "" "" + collectedEndTime;
                    console.dir(scombine);
                    console.dir(ecombine);
                    let webFormData = new WebFormData(collectedDayNum, scombine, ecombine, collectedVisibility);

                    $.ajax({
                        method: 'PUT',
                        url: `/API/Timetable/UpdateAccountTimetable/` + id,
                        dataType: 'json',
                        contentType: 'application/x-www-form-urlencoded;',
                        data: webFormData
                    }).done(function (data) {
                        new Noty({ text: data.message, type: 'success', layout: 'center' }).show();
                    }).fail(function (data) {
                        if (data.responseJSON.message == ""Identical"") {
                            identical(data.r");
                WriteLiteral(@"esponseJSON.record);
                            $('#messageModal').modal(""show"");
                        } else if (data.responseJSON.message == ""Overlap"") {
                            overlap(data.responseJSON.record);
                            $('#overlapModal').modal(""show"");
                        }
                    });
                }
            });

            $('#updateAny').on('click', function () {
                var x = document.getElementById('dayOfWeek').value;
                let collectedDayNum = x;
                let collectedStartDate = $('#startDateInput').val();
                let collectedStartTime = $('#startTimeInput1').val();
                let collectedEndDate = $('#endDateInput').val();
                let collectedEndTime = $('#endTimeInput1').val();
                var y = null;
                if (document.getElementById('visibilityInput').checked) {
                    y = true;
                } else {
                    y = false;
         ");
                WriteLiteral(@"       }
                let collectedVisibility = y;
                let scombine = collectedStartDate + "" "" + collectedStartTime;
                let ecombine = collectedEndDate + "" "" + collectedEndTime;
                console.dir(scombine);
                console.dir(ecombine);
                let webFormData = new WebFormData(collectedDayNum, scombine, ecombine, collectedVisibility);
                $.ajax({
                    type: 'PUT',
                    url: '/API/Timetable/UpdateAccountTimetableAnyway/' + id,
                    contentType: 'application/x-www-form-urlencoded',
                    data: webFormData
                }).done(function (data, textStatus, jqXHR) {
                    new Noty({
                        text: data.message,
                        theme: 'metroui',
                        layout: 'center',
                        type: 'success'
                    }).show();
                })
            });
        }


        function identica");
                WriteLiteral(@"l(records) {
            $('#output').html('');//Clear the <tbody> element first
            //The for-loop code here begins building and inserting the cells<td> and rows<tr>
            //into the <tbody> element. Note: Two rows are created during each pass of the loop.
            let $cellElement = null;
            let day;
            if (records.day == 1) {
                day = ""Monday""
            } else if (records.day == 2) {
                day = ""Tuesday""
            } else if (records.day == 3) {
                day = ""Wednesday""
            } else if (records.day == 4) {
                day = ""Thursday""
            } else if (records.day == 5) {
                day = ""Friday""
            } else if (records.day == 6) {
                day = ""Saturday""
            } else if (records.day == 7) {
                day = ""Sunday""
            }
            //Start - Defining row element
            let $rowElement = $('<tr></tr>');
            //Defining cell element
            ");
                WriteLiteral(@"$cellElement = $(`<td>${day}</td>`);
            $rowElement.append($cellElement);
            $cellElement = $(`<td>${moment(records.startDateTime).format('hh:mm A')}</td>`);
            $rowElement.append($cellElement);
            $cellElement = $(`<td>${moment(records.endDateTime).format('hh:mm A')}</td>`);
            $rowElement.append($cellElement);
            $cellElement = $(`<td>${moment(records.startDateTime).format('DD/MM/YYYY')}</td>`);
            $rowElement.append($cellElement);
            $cellElement = $(`<td>${moment(records.endDateTime).format('DD/MM/YYYY')}</td>`);
            $rowElement.append($cellElement);
            if (records.visibility == true) {
                $cellElement = $(`<td>&#x2713</td>`);
                $rowElement.append($cellElement);
            } else {
                $cellElement = $(`<td>&#x2717</td>`);
                $rowElement.append($cellElement);
            }

            $('#output').append($rowElement);
        }//end of identical ");
                WriteLiteral(@"function
        function overlap(records) {
            $('#overlapoutput').html('');//Clear the <tbody> element first

            //The for-loop code here begins building and inserting the cells<td> and rows<tr>
            //into the <tbody> element. Note: Two rows are created during each pass of the loop.
            let $cellElement = null;
            let day;
            if (records.day == 1) {
                day = ""Monday""
            } else if (records.day == 2) {
                day = ""Tuesday""
            } else if (records.day == 3) {
                day = ""Wednesday""
            } else if (records.day == 4) {
                day = ""Thursday""
            } else if (records.day == 5) {
                day = ""Friday""
            } else if (records.day == 6) {
                day = ""Saturday""
            } else if (records.day == 7) {
                day = ""Sunday""
            }
            //Start - Defining row element
            let $rowElement = $('<tr></tr>');
       ");
                WriteLiteral(@"     //Defining cell element
            $cellElement = $(`<td>${day}</td>`);
            $rowElement.append($cellElement);
            $cellElement = $(`<td>${moment(records.startDateTime).format('hh:mm A')}</td>`);
            $rowElement.append($cellElement);
            $cellElement = $(`<td>${moment(records.endDateTime).format('hh:mm A')}</td>`);
            $rowElement.append($cellElement);
            $cellElement = $(`<td>${moment(records.startDateTime).format('DD/MM/YYYY')}</td>`);
            $rowElement.append($cellElement);
            $cellElement = $(`<td>${moment(records.endDateTime).format('DD/MM/YYYY')}</td>`);
            $rowElement.append($cellElement);
            console.dir(records.startDateTime)
            if (records.visibility == true) {
                $cellElement = $(`<td>&#x2713</td>`);
                $rowElement.append($cellElement);
            } else {
                $cellElement = $(`<td>&#x2717</td>`);
                $rowElement.append($cellElement);
  ");
                WriteLiteral(@"          }

            $('#overlapoutput').append($rowElement);
        }//end of identical function
        function deleteAccount(id) {
            $.ajax({
                method: 'GET',
                url: `/API/Timetable/GetCustomerTimetableSummary/` + id,
                dataType: 'json',

            }).done(function (data) {
                console.log(data);
                let timetable = data;

                let day = timetable.day;
                let startTime = timetable.startTime;
                let endTime = timetable.endTime;

                //This will load a customer account summary to alert the user
                document.getElementById(""deleteMessage"").innerHTML = ""Delete timetable with a day of "" + day + ""\n A start time of rate "" + startTime + ""\n and an end time of "" + endTime + ""?"";
            });

            //To delete the timetable
            $('#deleteButton').on('click', function () {
                $.ajax({
                    method: 'DELET");
                WriteLiteral(@"E',
                    url: `/API/Timetable/DeleteTimetable/` + id
                }).done(function (data) {
                    new Noty({ text: data.message, type: 'success', layout: 'center' }).show();
                }).fail(function (data) {
                    new Noty({ text: data.responseJSON.message, type: 'error', layout: 'center' }).show();
                });
            })
        }

        function minFromMidnight(tm) {
            var ampm = tm.substr(-2)
            var clk = tm.substr(0, 5);
            var m = parseInt(clk.match(/\d+$/)[0], 10);
            var h = parseInt(clk.match(/^\d+/)[0], 10);
            h += (ampm.match(/pm/i)) ? 12 : 0;
            return h * 60 + m;
        }

    </script>

");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
