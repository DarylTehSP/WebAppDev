#pragma checksum "D:\SP stuff\Web Development\kachoweded - Copy\Learner\TMS\Views\AccountManager\ManageUsers.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "874a17e419b08180860ebbee6e9e6fa94ca2dda8"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_AccountManager_ManageUsers), @"mvc.1.0.view", @"/Views/AccountManager/ManageUsers.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/AccountManager/ManageUsers.cshtml", typeof(AspNetCore.Views_AccountManager_ManageUsers))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\SP stuff\Web Development\kachoweded - Copy\Learner\TMS\Views\_ViewImports.cshtml"
using TMS;

#line default
#line hidden
#line 2 "D:\SP stuff\Web Development\kachoweded - Copy\Learner\TMS\Views\_ViewImports.cshtml"
using TMS.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"874a17e419b08180860ebbee6e9e6fa94ca2dda8", @"/Views/AccountManager/ManageUsers.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4b920ee378507dd0789e3303ed664c79361ef06d", @"/Views/_ViewImports.cshtml")]
    public class Views_AccountManager_ManageUsers : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 463, true);
            WriteLiteral(@"<div class=""row"">
    <div class=""mx-auto col-md-10 mt-2"">
        <p class=""h1"">Manage Users</p>
    </div>
</div>
<div class=""row"">
    <div class=""mx-auto col-md-10"">
        <div id=""dataTable""></div>
    </div>
</div>
<div class=""row"">
    <div class=""mx-auto col-md-10 align-content-end"">
        <a class=""btn btn-secondary float-md-right mt-1"" href=""/AccountManager/AddUser"">Add user</a>
    </div>
</div>

<div id=""jqxLoader"">
</div>

");
            EndContext();
            DefineSection("scripts", async() => {
                BeginContext(480, 3565, true);
                WriteLiteral(@"
    <style>
        .cell-data {
            font-size: 1.2em;
        }

        .cell-header {
            font-size: 1.2em;
            font-weight: bold;
        }
    </style>
    <script>
        (function () {

            setupInterface();

            function setupInterface() {
                // prepare the web form interface.

                $.ajax({
                    url: '/API/AccountManager/GetUsers',
                    method: 'GET'
                }).done(function (data) {
                    //The logic below aims to setup the jqxDataTable widget 
                    //The logic sits inside the anonymous function which is passed into the
                    //done method.
                    let dataSource =
                    {
                        datatype: 'json',
                        datafields: [
                            { name: 'id' },
                            { name: 'fullName' },
                            {name:'userName'},
       ");
                WriteLiteral(@"                     { name: 'roleName', map:'role>roleName' }
                        ],
                        localData: data.records,
                        id:'id'
                    };
                    //The jqxDataTable widget needs a dataAdapter
                    let dataAdapter = new $.jqx.dataAdapter(dataSource);
            


                    $('#dataTable').jqxDataTable(
                        {
                            source: dataAdapter,
                            columnsResize: true,
                            columns: [

                                { text: 'Full name', dataField: 'fullName', width: '50%', cellclassname: 'cell-data', classname: 'cell-header' },
                                { text: 'User name (Email)', dataField: 'userName', width: '25%', cellclassname: 'cell-data', classname: 'cell-header' },
                                { text: 'Role', dataField: 'roleName', width: '15%', cellclassname: 'cell-data', classname: 'cell-header' },
  ");
                WriteLiteral(@"                              {
                                    text: 'Update', editable: false, cellsAlign: 'center', width: '10%', 
                                    align: 'center', dataField: 'id', cellclassname: 'cell-data', classname: 'cell-header',
                                    cellsRenderer: function (row, column, value) {
                                        // Render custom column.
                                        //
                                        //The following command will be executed the the jqxWidget's logic several times
                                        //depending on the number of rows to be created.
                                        console.log('rows are being renderred now.');
                                        console.log(value);
                                        return '<a href=""/AccountManager/UpdateUser/' + value + '"" ><i class=""w-100 fas fa-edit""></i></a>';
                                    }
                         ");
                WriteLiteral(@"       }
                            ],
                            autoRowHeight: true,
                            sortable: true,
                            height:500,
                            width: '100%',
                        });
                    //Display the users
                   
                    $('#jqxLoader').jqxLoader('close');
                })//end of $.ajax().done()

            }//end of setupInterface


        })()

    </script>


");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
